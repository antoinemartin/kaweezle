// Generate with the following command:
// protoc --go-grpc_out=. --go_out=. --go_opt=paths=source_relative --go-grpc_opt=paths=source_relative *.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.1
// source: elevated.proto

package config

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ElevatedConfiguration_AddRoute_FullMethodName         = "/config.ElevatedConfiguration/AddRoute"
	ElevatedConfiguration_RemoveRoute_FullMethodName      = "/config.ElevatedConfiguration/RemoveRoute"
	ElevatedConfiguration_ConfigureDomains_FullMethodName = "/config.ElevatedConfiguration/ConfigureDomains"
	ElevatedConfiguration_Stop_FullMethodName             = "/config.ElevatedConfiguration/Stop"
)

// ElevatedConfigurationClient is the client API for ElevatedConfiguration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ElevatedConfigurationClient interface {
	AddRoute(ctx context.Context, in *AddRouteRequest, opts ...grpc.CallOption) (*AddRouteResponse, error)
	RemoveRoute(ctx context.Context, in *RemoveRouteRequest, opts ...grpc.CallOption) (*RemoveRouteResponse, error)
	ConfigureDomains(ctx context.Context, in *ConfigureDomainsRequest, opts ...grpc.CallOption) (*ConfigureDomainsResponse, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
}

type elevatedConfigurationClient struct {
	cc grpc.ClientConnInterface
}

func NewElevatedConfigurationClient(cc grpc.ClientConnInterface) ElevatedConfigurationClient {
	return &elevatedConfigurationClient{cc}
}

func (c *elevatedConfigurationClient) AddRoute(ctx context.Context, in *AddRouteRequest, opts ...grpc.CallOption) (*AddRouteResponse, error) {
	out := new(AddRouteResponse)
	err := c.cc.Invoke(ctx, ElevatedConfiguration_AddRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elevatedConfigurationClient) RemoveRoute(ctx context.Context, in *RemoveRouteRequest, opts ...grpc.CallOption) (*RemoveRouteResponse, error) {
	out := new(RemoveRouteResponse)
	err := c.cc.Invoke(ctx, ElevatedConfiguration_RemoveRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elevatedConfigurationClient) ConfigureDomains(ctx context.Context, in *ConfigureDomainsRequest, opts ...grpc.CallOption) (*ConfigureDomainsResponse, error) {
	out := new(ConfigureDomainsResponse)
	err := c.cc.Invoke(ctx, ElevatedConfiguration_ConfigureDomains_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elevatedConfigurationClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, ElevatedConfiguration_Stop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ElevatedConfigurationServer is the server API for ElevatedConfiguration service.
// All implementations must embed UnimplementedElevatedConfigurationServer
// for forward compatibility
type ElevatedConfigurationServer interface {
	AddRoute(context.Context, *AddRouteRequest) (*AddRouteResponse, error)
	RemoveRoute(context.Context, *RemoveRouteRequest) (*RemoveRouteResponse, error)
	ConfigureDomains(context.Context, *ConfigureDomainsRequest) (*ConfigureDomainsResponse, error)
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	mustEmbedUnimplementedElevatedConfigurationServer()
}

// UnimplementedElevatedConfigurationServer must be embedded to have forward compatible implementations.
type UnimplementedElevatedConfigurationServer struct {
}

func (UnimplementedElevatedConfigurationServer) AddRoute(context.Context, *AddRouteRequest) (*AddRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoute not implemented")
}
func (UnimplementedElevatedConfigurationServer) RemoveRoute(context.Context, *RemoveRouteRequest) (*RemoveRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRoute not implemented")
}
func (UnimplementedElevatedConfigurationServer) ConfigureDomains(context.Context, *ConfigureDomainsRequest) (*ConfigureDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureDomains not implemented")
}
func (UnimplementedElevatedConfigurationServer) Stop(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedElevatedConfigurationServer) mustEmbedUnimplementedElevatedConfigurationServer() {}

// UnsafeElevatedConfigurationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ElevatedConfigurationServer will
// result in compilation errors.
type UnsafeElevatedConfigurationServer interface {
	mustEmbedUnimplementedElevatedConfigurationServer()
}

func RegisterElevatedConfigurationServer(s grpc.ServiceRegistrar, srv ElevatedConfigurationServer) {
	s.RegisterService(&ElevatedConfiguration_ServiceDesc, srv)
}

func _ElevatedConfiguration_AddRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElevatedConfigurationServer).AddRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ElevatedConfiguration_AddRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElevatedConfigurationServer).AddRoute(ctx, req.(*AddRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElevatedConfiguration_RemoveRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElevatedConfigurationServer).RemoveRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ElevatedConfiguration_RemoveRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElevatedConfigurationServer).RemoveRoute(ctx, req.(*RemoveRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElevatedConfiguration_ConfigureDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElevatedConfigurationServer).ConfigureDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ElevatedConfiguration_ConfigureDomains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElevatedConfigurationServer).ConfigureDomains(ctx, req.(*ConfigureDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElevatedConfiguration_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElevatedConfigurationServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ElevatedConfiguration_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElevatedConfigurationServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ElevatedConfiguration_ServiceDesc is the grpc.ServiceDesc for ElevatedConfiguration service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ElevatedConfiguration_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "config.ElevatedConfiguration",
	HandlerType: (*ElevatedConfigurationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRoute",
			Handler:    _ElevatedConfiguration_AddRoute_Handler,
		},
		{
			MethodName: "RemoveRoute",
			Handler:    _ElevatedConfiguration_RemoveRoute_Handler,
		},
		{
			MethodName: "ConfigureDomains",
			Handler:    _ElevatedConfiguration_ConfigureDomains_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _ElevatedConfiguration_Stop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "elevated.proto",
}
